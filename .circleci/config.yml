version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      ID:
        Description: Unique identifier.
        Type: String
         
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} 
            aws delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

orbs:
  slack: circleci/slack@4.1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: cd frontend && npm install && npm build
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            echo 'success f'
          when: on_fail
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          mentions: '@EngineeringTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
  build-backend:
    docker:
      - image: cimg/node:14.1.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            npm run start
            
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:14.1.0
    steps:
      - checkout
      - run: cd frontend && npm install && npm run test
      - restore_cache:
          keys: [frontend-build]
                
  test-backend:
    docker:
      - image: circleci/node:14.1.0
    steps:
      - checkout
      - run: cd backend && npm install  && npm run test
      - restore_cache:
          keys: [backend-build]
  scan-frontend:
    docker:
      - image: circleci/node:14.1.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]

      - run:
          name: front-end audit
          command: |
            cd frontend
            npm install
            npm audit fix
            npm audit --audit-level=critical


  scan-backend:
    docker:
      - image: circleci/node:14.1.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]

      - run:
          name: backend-end audit
          command: |
            cd backend
            npm install
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          mentions: '@EngineeringTeam'
          template: basic_fail_1
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project= udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID= ${CIRCLE_WORKFLOW_ID:0:7}  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
      
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      
      
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend]
          