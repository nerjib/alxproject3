version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      ID:
         type: string
         default: ${CIRCLE_WORKFLOW_ID}   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.ID>> 
            aws s3 rm s3://udapeople-<< parameters.ID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.ID>>

orbs:
  slack: circleci/slack@4.1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: cd frontend && npm install && npm build
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            echo 'success f'
          when: on_fail
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          mentions: '@EngineeringTeam'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
  build-backend:
    docker:
      - image: cimg/node:14.1.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            npm run start
            
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:14.1.0
    steps:
      - checkout
      - run: cd frontend && npm install && npm run test
      - restore_cache:
          keys: [frontend-build]
                
  test-backend:
    docker:
      - image: circleci/node:14.1.0
    steps:
      - checkout
      - run: cd backend && npm install  && npm run test
      - restore_cache:
          keys: [backend-build]
  scan-frontend:
    docker:
      - image: circleci/node:14.1.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]

      - run:
          name: front-end audit
          command: |
            cd frontend
            npm install
            npm audit fix
            npm audit --audit-level=critical


  scan-backend:
    docker:
      - image: circleci/node:14.1.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]

      - run:
          name: backend-end audit
          command: |
            cd backend
            npm install
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          mentions: '@EngineeringTeam'
          template: basic_fail_1
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            yum install -y tar gzip
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags "project= udapeople" \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides "ID=${CIRCLE_WORKFLOW_ID:0:7}" 

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags "project=udapeople" \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides "ID=${CIRCLE_WORKFLOW_ID:0:7}"  
      
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11

    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["74:2d:30:b3:36:63:7d:0c:cc:53:d7:f2:99:ca:0a:98"]      
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          ID: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install AWS CLI dependencies
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |          
            if grep -q "has been executed successfully." ~/ALXPROJECT3/backend/migrations_dump.txt
            then
                echo "DB migration was successful, will update memstash..."
                curl https://kvdb.io/GoKFnTqvRVAKS2CcvPr2Vx/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
                echo "DB migration failed, please verify setup! Probably the database already exists. Verify setup!"

            fi 
            
     # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          ID: ${CIRCLE_WORKFLOW_ID:0:7}
  deploy-frontend:
    docker:
      - image: circleci/node:14.1.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url
          command: |
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - destroy-environment:
          ID: ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
            - image: python:3.7-alpine3.11

    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["74:2d:30:b3:36:63:7d:0c:cc:53:d7:f2:99:ca:0a:98"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip install awscli
            aws --version
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml      # Here's where you will add some code to rollback on failure  


  buildEnv:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - run:
          name: "echo an env var that is part of our project"
          command: |
            echo ${CIRCLE_WORKFLOW_ID}   
workflows:
  default:
    jobs:
      - buildEnv
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend]
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires: [ test-backend, test-frontend, scan-frontend, configure-infrastructure]          
      - deploy-backend:
          requires:
            - run-migrations
      - deploy-frontend:
          requires:
            - run-migrations